name: validate
on:
  workflow_call:
    inputs:
      SDL2_VERSION:
        type: string
        required: false
        default: '2.30.3'
      N64RECOMP_COMMIT:
        type: string
        required: false
        default: '5b17bf8bb556d2544c6161487232a455eae8f188'
      DXC_CHECKSUM:
        type: string
        required: false
        default: '4e6f4e52989aca69739880b40b9f988357f15d10ca03284377b81f1502463ff5'
    secrets:
      ZRE_REPO_WITH_PAT:
        required: true
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  build-uwp:
    runs-on: windows-latest
    strategy:
      matrix:
        type: [ Debug, Release ]
    name: windows (${{ matrix.type }})
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}
          submodules: recursive
      - name: Install Visual Studio Dependencies
        run: |
          choco install visualstudio2019community
          choco install ninja
          Remove-Item -Path "C:\ProgramData\Chocolatey\bin\ccache.exe" -Force -ErrorAction SilentlyContinue
      - name: Prepare Build
        run: |-
          git clone ${{ secrets.ZRE_REPO_WITH_PAT }}
          ./zre/process.ps1
          cp ./zre/mm_shader_cache.bin ./shadercache/
      - name: Build N64Recomp & RSPRecomp
        run: |
          git clone https://github.com/Mr-Wiseguy/N64Recomp.git --recurse-submodules N64RecompSource
          cd N64RecompSource
          git checkout ${{ inputs.N64RECOMP_COMMIT }}
          git submodule update --init --recursive

          # enable ccache
          set $env:PATH="$env:USERPROFILE/.cargo/bin;$env:PATH"
          $cpuCores = (Get-CimInstance -ClassName Win32_Processor).NumberOfLogicalProcessors

          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_MAKE_PROGRAM=ninja -G Ninja -S . -B cmake-build
          cmake --build cmake-build --config Release --target N64RecompCLI -j $cpuCores
          cmake --build cmake-build --config Release --target RSPRecomp -j $cpuCores
          cp cmake-build/N64Recomp.exe ..
          cp cmake-build/RSPRecomp.exe ..
      - name: Run N64Recomp & RSPRecomp
        run: |
          ./N64Recomp.exe us.rev1.toml
          ./RSPRecomp.exe aspMain.us.rev1.toml
          ./RSPRecomp.exe njpgdspMain.us.rev1.toml
      - name: Build ZeldaRecomp for UWP
        run: |
          set $env:PATH="$env:USERPROFILE/.cargo/bin;$env:PATH"
          $cpuCores = (Get-CimInstance -ClassName Win32_Processor).NumberOfLogicalProcessors
          
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.type }} -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER=cl -DCMAKE_C_COMPILER=cl -DCMAKE_MAKE_PROGRAM=ninja -G Ninja -S . -B cmake-build -DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION=10.0 -DCMAKE_UWP_PLATFORM=true
          cmake --build cmake-build --config ${{ matrix.type }} --target Zelda64Recompiled -j $cpuCores
      - name: Prepare Archive for UWP
        run: |
          mv cmake-build/Zelda64Recompiled Zelda64Recompiled
          rm -rf assets/scss
          zip -r Zelda64Recompiled.zip Zelda64Recompiled assets/ gamecontrollerdb.txt
      - name: Upload Zelda64Recomp for UWP
        uses: actions/upload-artifact@v4
        with:
          name: Zelda64Recompiled-UWP-${{ runner.os }}-${{ matrix.type }}
          path: Zelda64Recompiled.zip
